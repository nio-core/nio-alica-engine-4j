package de.uniks.vs.jalica.newtests;

import de.uniks.vs.jalica.autogenerated.BehaviourCreator;
import de.uniks.vs.jalica.autogenerated.plans.behaviour.Attack;
import de.uniks.vs.jalica.autogenerated.plans.behaviour.TestConditionCreator;
import de.uniks.vs.jalica.autogenerated.plans.behaviour.TestUtilityFunctionCreator;
import de.uniks.vs.jalica.engine.BasicBehaviour;
import de.uniks.vs.jalica.behaviours.ConstraintCreator;
import de.uniks.vs.jalica.common.AlicaSystemClock;
import de.uniks.vs.jalica.communication.AlicaZMQCommunication;
import de.uniks.vs.jalica.engine.AlicaEngine;
import de.uniks.vs.jalica.common.FileSystem;
import de.uniks.vs.jalica.engine.common.SystemConfig;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AlicaMultiAgent {

    private BehaviourCreator bc;
    private TestConditionCreator cc;
    private ConstraintCreator crc;
    private TestUtilityFunctionCreator uc;

    @BeforeEach
    void beforeAll() {
        // determine the path teamObserver the testsincpp config
//        String path = supplementary::FileSystem::getSelfPath();
//        int place = path.rfind("devel");
//        path = path.substr(0, place);
//        path = path + "src/alica/alica_test/src/testsincpp";
//
//        // bring up the SystemConfig with the corresponding path
//        sc = supplementary::SystemConfig::getInstance();
//        sc->setRootPath(path);
//        sc->setConfigPath(path + "/etc");
        // setup the engine
        bc = new BehaviourCreator();
        cc = new TestConditionCreator();
        uc = new TestUtilityFunctionCreator();
        crc = new ConstraintCreator();
    }

    @Test
     public void testMulitAgents() throws InterruptedException {

        FileSystem.PACKAGE_SRC = "src/test/java/de/uniks/vs/jalica";

//        sc->setHostname("nase");
//        ae = new alica::AlicaEngine();
//        ae->setAlicaClock(new alicaRosProxy::AlicaROSClock());
//        ae->setCommunicator(new alicaRosProxy::AlicaRosCommunication(ae));
//        ASSERT_TRUE(ae->init(bc, cc, uc, crc, "RolesetTA", "MultiAgentTestMaster", ".", true))
//                << "Unable teamObserver initialise the Alica Engine!";
        SystemConfig sc = new SystemConfig("nase");
        AlicaEngine alicaEngine1 = new AlicaEngine();
        alicaEngine1.setAlicaClock(new AlicaSystemClock());
        alicaEngine1.setCommunicator(new AlicaZMQCommunication(alicaEngine1));
        boolean result = alicaEngine1.init(sc, bc, cc, uc, crc, "RolesetTA", "MultiAgentTestMaster", "roles/", true);
        Assertions.assertTrue(result);

//        sc->setHostname("hairy");
//        ae2 = new alica::AlicaEngine();
//        ae2->setAlicaClock(new alicaRosProxy::AlicaROSClock());
//        ae2->setCommunicator(new alicaRosProxy::AlicaRosCommunication(ae2));
//        ASSERT_TRUE(ae2->init(bc, cc, uc, crc, "RolesetTA", "MultiAgentTestMaster", ".", true))
//                << "Unable teamObserver initialise the Alica Engine!";
        SystemConfig sc2 = new SystemConfig("hairy");
        AlicaEngine alicaEngine2 = new AlicaEngine();
        alicaEngine2.setAlicaClock(new AlicaSystemClock());
        alicaEngine2.setCommunicator(new AlicaZMQCommunication(alicaEngine2));
        result = alicaEngine2.init(sc2, bc, cc, uc, crc, "RolesetTA", "MultiAgentTestMaster", "roles/", true);
        Assertions.assertTrue(result);
//
//        ae->start();
//        ae2->start();
        alicaEngine1.start();
        alicaEngine2.start();
//
        for (int i = 0; i < 20; i++) {
            System.out.println(this.getClass().getSimpleName()+ "testMulitAgents: Step " +i);

//            ae->stepNotify();
//            chrono::milliseconds duration(33);
//            this_thread::sleep_for(duration);
//            ae2->stepNotify();
//            this_thread::sleep_for(duration);
            alicaEngine1.stepNotify();
            Thread.sleep(33);
            alicaEngine2.stepNotify();
            Thread.sleep(330);

		if (i > 24)
		{
//			if (alicaEngine1.getPlanBase().getDeepestNode() != null)
//                System.out.println("AE: " + alicaEngine1.getPlanBase().getDeepestNode().toString());
//			if (alicaEngine1.getPlanBase().getDeepestNode() != null)
//				System.out.println("AE2: " + alicaEngine2.getPlanBase().getDeepestNode().toString());
            System.out.println("-------------------------");
		}

            if (i < 10) {
                Assertions.assertEquals(alicaEngine1.getPlanBase().getRootNode().getActiveState().getID(), 1413200842974l);
                Assertions.assertEquals(alicaEngine2.getPlanBase().getRootNode().getActiveState().getID(), 1413200842974l);
            }

            if (i == 10) {
                System.out.println("1--------- Initial State passed ---------");
                TestWorldModel.getOne().setTransitionCondition1413201227586(true);
                TestWorldModel.getTwo().setTransitionCondition1413201227586(true);
            }

            if (i > 11 && i < 15) {
                Assertions.assertEquals(alicaEngine1.getPlanBase().getRootNode().getActiveState().getID(), 1413201213955l);
                Assertions.assertEquals(alicaEngine2.getPlanBase().getRootNode().getActiveState().getID(), 1413201213955l);
                Assertions.assertEquals((alicaEngine1.getPlanBase().getRootNode().getChildren().get(0)).getPlan().getName(), "MultiAgentTestPlan");
                Assertions.assertEquals((alicaEngine2.getPlanBase().getRootNode().getChildren().get(0)).getPlan().getName(), "MultiAgentTestPlan");
            }
            if (i == 15)
            {
//                for (auto iter : *ae.getBehaviourPool()->getAvailableBehaviours())
                for ( BasicBehaviour basicBehaviour : alicaEngine1.getBehaviourPool().getAvailableBehaviours().values()) {

                    if (basicBehaviour.getName() == "Attack")
                    {
//                        ASSERT_GT(((Attack)basicBehaviour).callCounter, 5);
                        Assertions.assertEquals(5, ((Attack)basicBehaviour).callCounter);

                        if (((Attack) basicBehaviour).callCounter > 3) {
                            TestWorldModel.getOne().setTransitionCondition1413201052549(true);
                            TestWorldModel.getTwo().setTransitionCondition1413201052549(true);
                            TestWorldModel.getOne().setTransitionCondition1413201370590(true);
                            TestWorldModel.getTwo().setTransitionCondition1413201370590(true);
                        }
                    }
                }
                System.out.println("2--------- Engagement teamObserver cooperative plan passed ---------" );
            }
//            if (i == 16)
//            {
//                ASSERT_TRUE(
//                        (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413201030936
//                    || (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413201030936)
//					<< endl << (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId()
//                    << " " << (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId()
//                    << endl;
//
//                ASSERT_TRUE(
//                        (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413807264574
//                    || (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413807264574)
//					<< endl << (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId()
//                    << " " << (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId()
//                    << endl;
//                alicaTests::TestWorldModel::getOne()->setTransitionCondition1413201227586(false);
//                alicaTests::TestWorldModel::getTwo()->setTransitionCondition1413201227586(false);
//                cout << "3--------- Passed transitions in subplan passed ---------" << endl;
//            }
//            if (i >= 17 && i <= 18)
//            {
//                ASSERT_TRUE(
//                        (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413201030936
//                    || (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413201030936)
//					<< "AE State: "
//                    << (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId()
//                    << " AE2 State: "
//                    << (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() << endl;
//                ASSERT_TRUE(
//                        (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413807264574
//                    || (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() == 1413807264574)
//					<< "AE State: "
//                    << (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() << " "
//                    << (*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->toString() << endl
//                    << " AE2 State: "
//                    << (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->getId() << " "
//                    << (*ae2->getPlanBase()->getRootNode()->getChildren()->begin())->getActiveState()->toString() << endl;
//                if(i==18) {
//                    cout << "4--------- Stayed in these state although previous transitions are not true anymore ---------"
//                            << endl;
//                    alicaTests::TestWorldModel::getOne()->setTransitionCondition1413201389955(true);
//                    alicaTests::TestWorldModel::getTwo()->setTransitionCondition1413201389955(true);
//                }
//            }
//            if (i == 19)
//            {
//                ASSERT_TRUE(
//                        ae2->getPlanBase()->getRootNode()->getActiveState()->getId() == 1413201380359
//                    && ae->getPlanBase()->getRootNode()->getActiveState()->getId() == 1413201380359)
//					<< " AE State: "
//                    << ae->getPlanBase()->getRootNode()->getActiveState()->getId()
//                    << " AE2 State: "
//                    << ae2->getPlanBase()->getRootNode()->getActiveState()->getId() << endl;
//            }
        }

        Thread.sleep(2000);
    }

}
